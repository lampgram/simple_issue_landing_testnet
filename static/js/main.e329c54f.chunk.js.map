{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","state","recipient","meta1_coins_amount","handleChange1","bind","handleChange2","handleSubmit","axios","post","this","then","response","console","log","alert","statusText","catch","error","event","setState","target","value","className","onSubmit","onChange","type","onClick","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"yIAAAA,EAAOC,QAAU,IAA0B,kC,+KC8D5BC,E,kDAxDb,aAAe,IAAD,8BACZ,gBACKC,MAAQ,CACXC,UAAW,GACXC,mBAAoB,IAEtB,EAAKC,cAAgB,EAAKA,cAAcC,KAAnB,gBACrB,EAAKC,cAAgB,EAAKA,cAAcD,KAAnB,gBACrB,EAAKE,aAAe,EAAKA,aAAaF,KAAlB,gBARR,E,2DAYZG,IAAMC,KAAK,wHACTC,KAAKT,OAEJU,MAAK,SAAUC,GACdC,QAAQC,IAAIF,GACZG,MAAMH,EAASI,eAEhBC,OAAM,SAAUC,GACfL,QAAQC,IAAII,GACC,8CAATA,EACFH,MAAM,mCAENA,MAAMG,Q,oCAIAC,GACZT,KAAKU,SAAS,CAAElB,UAAWiB,EAAME,OAAOC,U,oCAG5BH,GACZT,KAAKU,SAAS,CAAEjB,mBAAoBgB,EAAME,OAAOC,U,+BAGjD,OACE,yBAAKC,UAAU,OACb,yBAAKC,SAAUd,KAAKH,cAClB,+DAC+B,6BAC7B,2BAAOe,MAAOZ,KAAKT,MAAMC,UAAWuB,SAAUf,KAAKN,iBAErD,6BALF,OAKiB,6BACf,4DAC4B,6BAC1B,2BAAOsB,KAAK,SAASJ,MAAOZ,KAAKT,MAAME,mBAAoBsB,SAAUf,KAAKJ,iBAE5E,6BAVF,OAUiB,6BACf,4BAAQoB,KAAK,SAASC,QAASjB,KAAKH,aAAce,MAAM,UAAxD,gB,GAlDQM,IAAMC,WCOJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB/B,MAAK,SAAAgC,GACJA,EAAaC,gBAEd3B,OAAM,SAAAC,GACLL,QAAQK,MAAMA,EAAM2B,c","file":"static/js/main.e329c54f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport axios from \"axios\";\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      recipient: '',\n      meta1_coins_amount: ''\n    }\n    this.handleChange1 = this.handleChange1.bind(this);\n    this.handleChange2 = this.handleChange2.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleSubmit() {\n    axios.post('https://altdevopsclaimcert.testnet.meta1.io/meta1-issue?apiKey=c7e57b1367ab31ec3992f98011b2918e0b72da5c33714bd6d909d8',\n      this.state\n    )\n      .then(function (response) {\n        console.log(response)\n        alert(response.statusText);\n      })\n      .catch(function (error) {\n        console.log(error);\n        if (error == 'Error: Request failed with status code 500')\n          alert('no tokens/account to be claimed');\n        else\n          alert(error);\n      });\n  }\n\n  handleChange1(event) {\n    this.setState({ recipient: event.target.value });\n  }\n\n  handleChange2(event) {\n    this.setState({ meta1_coins_amount: event.target.value });\n  }\n  render() {\n    return (\n      <div className=\"App\">\n        <div onSubmit={this.handleSubmit}>\n          <label>\n            Recipient on META1 blockchain<br></br>\n            <input value={this.state.recipient} onChange={this.handleChange1} />\n          </label>\n          <br></br>&nbsp;<br></br>\n          <label>\n            META1 tokens to be claimed<br></br>\n            <input type=\"number\" value={this.state.meta1_coins_amount} onChange={this.handleChange2} />\n          </label>\n          <br></br>&nbsp;<br></br>\n          <button type=\"submit\" onClick={this.handleSubmit} value=\"Submit\">Submit</button>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}